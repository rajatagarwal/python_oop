1. Create an empty class placeholder. Classes does not have () while creating time, although you need them when you create instance of them 
because you probably need them to pass constructor(init) parameters.

class Employee:
    pass

2. You can create instances of the empty class and print them. It will show memory location where those instances are living.

emp1 = Employee()
emp2 = Employee()
print(emp1)
print(emp2)

3. You can create and assign values to these instances without doing anything inside the class

emp1.name = 'Rajat Agrawal'
emp1.pay = 180

emp2.name = 'Test User'
emp2.pay = 175

4. But the better approach is to create a constructor inside a class so that when you create instance of class and you can give these values at that time all together. Here name 
and pay are the instance variables as they are unique to instance.

class Employee:
    def __init__(self, name, pay):
        self.name = name
        self.pay = pay

emp1 = Employee('Rajat Agrawal', 50000)
emp2 = Employee('Test User', 60000)

5. We can also create functions in the class, which can be acccessible by the instances, for example apply_raise(). Instances which call this function gets the raise. 
Here you note that you are passing self as a parameter to the apply_raise() function inside the class because when you call the method inside a class using an instance, it 
automatically injects the instance as a parameter in the class. 

class Employee:
    def __init__(self, name, pay):
        self.name = name
        self.pay = pay
    
    def apply_raise(self):
        self.pay = self.pay * 1.05

emp1 = Employee('Rajat Agrawal', 50000)
emp2 = Employee('Test User', 60000)

emp1.apply_raise() # OR Employee.apply_raise(emp1)

6. Now instead of hard coding the raise amount which is common for all the instances, we can create a class variable which can be acccessible by all the instances.

class Employee:
    
    raise_amount = 1.05

    def __init__(self, name, pay):
        self.name = name
        self.pay = pay
    
    def apply_raise(self):
        self.pay = self.pay * self.raise_amount  # OR self.pay = self.pay * Employee.raise_amount

emp1 = Employee('Rajat Agrawal', 50000)
emp2 = Employee('Test User', 60000)

emp1.apply_raise() # OR Employee.apply_raise(emp1)

7. Now you can see all the namespace of instances and classes by typing follwing:
print(emp1.__dict__)
OUTPUT: {'name': 'Rajat Agrawal', 'pay': 52000.0}
print(Employee.__dict__)
OUTPUT: {'__module__': '__main__', 'raise_amount': 1.05, '__init__': <function Employee.__init__ at 0x0339E2B0>, 'appy_raise': <function Employee.appy_raise at 0x0339E220>, '__dict__': <attribute '__dict__' of 'Employee' objects>, '__weakref__': <attribute '__weakref__' of 'Employee' objects>, '__doc__': None}

8. When you have class variable defined, and when instance is initiated then it first searches itself if class variable is reassigned to a new value inside it, otherwise it takes
whatever class variable value is.

print(Employee.raise_amount)        # 1.05
print(emp1.raise_amount)            # 1.05
print(emp2.raise_amount)            # 1.05


You can change raise_amount value for all the instances by reassigning it using Class
Employee.raise_amount = 1.07
print(Employee.raise_amount)        # 1.07
print(emp1.raise_amount)            # 1.07
print(emp2.raise_amount)            # 1.07

Or you can just reassign it for any instance using that instance

emp1.raise_amount = 1.10
print(Employee.raise_amount)        # 1.05
print(emp1.raise_amount)            # 1.10
print(emp2.raise_amount)            # 1.05

9. There is a another type of a variable where you do not need to use 'self' to access them. For example creating a variable which tracks the total employees.

class Employee:
    num_of_employees = 0

    def __init__(self, name, pay):
        self.name = name
        self.pay = pay
        Employee.num_of_employees += 1
    
    def apply_raise(self):
        self.pay = self.pay * self.raise_amount  # OR self.pay = self.pay * Employee.raise_amount

print(Employee.num_of_employees)            # 0 Employee
emp1 = Employee('Rajat Agrawal', 50000)
print(Employee.num_of_employees)            # 1 Employee
emp2 = Employee('Test User', 60000)
print(Employee.num_of_employees)            # 2 Employees

10. Just like class variables, we can have class methods as well. For example we can create a method call set_raise_amount() as a class method. To create a class method you 
need to use @classmethod decorator. Class method take class as input parameter, generally represents as 'cls'.

class Employee:
    num_of_employees = 0
    raise_amount = 1.05

    def __init__(self, name, pay):
        self.name = name
        self.pay = pay
        Employee.num_of_employees += 1
    
    def apply_raise(self):
        self.pay = self.pay * self.raise_amount  # OR self.pay = self.pay * Employee.raise_amount
    
    @classmethod
    def set_raise_amount(cls, amount):
        cls.raise_amount = amount

Employee.set_raise_amount(1.10)

11. One of the very useful feature of class method is to use it as a alternative constructor. Suppose we have a custom data which is represented as 'rajat agrawal-50000' string, where
name and salary is seperated using hypen (-). If we want to create an instance using such data then either we need to split it outside the class which can be useful for couple of 
records but if it is a common pattern to receive such results as well then it is good to create a alternative constructor using class method.

class Employee:
    def __init__(self, name, pay):
        self.name = name
        self.pay = pay
        Employee.num_of_employees += 1
    
    @classmethod
    def from_string(cls, emp_string):
        name, pay = emp_string.split('-')
        return cls(name, pay)

emp_3 = Employee.from_string('Rajat Agrawal - 50000')

We need to make sure we return cls instance from the classmethod, otherwise it will not return the object value to the instance after creation.

For example check Python's datetime module where there are multiple alternative constructors are present to create a datetime object. 
https://github.com/python/cpython/blob/master/Lib/datetime.py#L855

12. Static Methods: 
When working inside a class, all the regular methods automatically passes the instance parameter, in general, which is 'self'.
We also work with class methods where the class is passed as input parameter, which generally represents as 'cls'.

Static methods are methods which where we do not give self or cls parameters. They just behave like a regular function outside the class, but we need to include them in 
the classes because of some supportive logic.

class Employee:
    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False # Saturday and Sunday
        return True

import datetime
my_date = datetime.date(2020, 3, 14)   # It is actually a Saturday, so it will print False.
print(Employee.is_workday(my_date))

14. Inheritence: Inheritence allows a sub class to inherit attributes and methods from the parent class. A sub class can overwrite or add completely new functionality without affecting
the parent class anyway. So example, if we create new sub classes like Developer and Managers then they both can inherit from the Employee parent class because both Developer and
Managers can have Name, Email and Pay which they can reuse from their Parent class Employee.

class Employee:
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
    
    def fullname(self):
        return self.first + " " + self.last

class Developer(Employee):
    pass

class Manager(Employee):
    pass

Although we are passing content of Developer and Manager classes but as they are inherited from Employee class they contain all the functionality of the Employee class.

dev1 = Developer('Deve', 'Loper', 53255)
man1 = Manager('Mana', 'Ger', 73242)

print(dev1.fullname())   # Deve Loper
print(man1.fullname())   # Mana Ger

So what is happening here is that when we create an instance of Developer/Manager class it first looks at the __init__ method in the Developer/Manager class and if it didn't
find any, then it will look for __init__ method in the parent class. So python has created a chain of inheritence to find out what it is looking for, this chain is called as
Method Resolutioner. 

So to visualize this thing we can use following method which is very useful in the real world.
It shows method resolution order, inherited methods and their signature, data and other useful information.

print(help(Developer))

OUTPUT:

Help on class Developer in module __main__:

class Developer(Employee)
 |  Developer(first_name, last_name, pay)
 |
 |  # Inheritence
 |
 |  Method resolution order:
 |      Developer
 |      Employee
 |      builtins.object
 |
 |  Methods inherited from Employee:
 |
 |  __init__(self, first_name, last_name, pay)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  appy_raise(self)
 |
 |  fullname(self)
 |
 |  from_string(emp_string) from builtins.type
 |
 |  set_raise_amount(amount) from builtins.type
 |
 |  ----------------------------------------------------------------------
 |  Static methods inherited from Employee:
 |
 |  is_workday(day)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Employee:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Employee:
 |
 |  num_of_employees = 5
 |
 |  raise_amount = 1.12

15. Often you want to have your subclass object creating with more information then the parent class. For example, if we want to create an instance of Developer class, and we
want 'Preferred Programming Language' as an input as well while creating the instance. Then we can have Developer class its own __init__ method.

class Developer(Employee):
    raise_amount = 1.10

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        # Generally a good approach when you are having single inheritence, makes code clear.
        # OR
        # Employee.__init__(self, first, last, pay)
        # Using class name with the init method is useful when you are having multiple inheritence.
        self.prog_lang = prog_lang

dev1 = Developer('deve', 'loper', 53266, 'python')

16. Another code example with Manager class

class Manager(Employee):
    
    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
            # Now you might be wondering why we didn't pass as an empty list as a argument instead on None at the first place.
            # That's because you never want to pass mutable datatype like list or dictionary as default argument. - Find out why?
        else:
            self.employees = employees
        
    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)
    
    def remove_emp(self, emp):
        if emp in self.employees:
            self.employees.remove(emp)
    
    def print_emp(self):
        for emp in self.employees:
            print(f'==> {emp.fullname()}')

man1 = Manager('Mana', 'ger', 256452) # Allow to add without employee coz we have specified employee=None in the init method of the manager.
man1.add_emp(dev1)
man1.print_emp()

man2 = Manager('Big', 'Mana', 555555, [man1, dev1])
# Here we are passing man1 as reportee to man2 because Manager are Employee as well and hence can be managed by others.
print('Big Manager reportees are')
man2.print_emp()

OUTPUT:
Big Manager reportees are
==> Mana ger
==> deve loper

17. Python method isinstance tell if the given value is the instance of the class.

print(isinstance(man1, Manager))            # True
print(isinstance(man1, Employee))           # True
print(isinstance(man1, Developer))          # False

18. Python also have a method called issubclass to check if a given class is subclass of another class. 

print(issubclass(Developer, Employee))      # True
print(issubclass(Developer, object))        # True
print(issubclass(Developer, Manager))       # False

It also reminds us that every class is subclass of object. 

19. For inheritence examples you can look at python's werkzeug exceptions library 
https://github.com/pallets/werkzeug/blob/d6e98a0105ea126f10c432d33f101ec793df6440/src/werkzeug/exceptions.py#L71

20. Dunder/Magic method: Dunder is short for Double Underscores. We're already using one dunder method called as init, which is to initialize the object.
so when we do like "emp1 = Employee('Rajat', 'Agrawal', 50000)" then it knows that we are trying to create an instacne of the class using __init__. We are 
not calling __init__ explicitly and it is getting called automatically.

Similarly there are other useful dunder methods like repr and str.

"repr" is used for debugging purpose and really meant to be seen by other developers
"str" is more of a readable representation of a object and meant to be used as a display for a user.


